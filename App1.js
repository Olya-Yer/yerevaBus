/** * Sample React Native App * https://github.com/facebook/react-native * * @format * @flow */import React, {Component} from 'react';import {Platform,Button,TouchableHighlight,StatusBar, Dimensions,StyleSheet, Text, View, TextInput} from 'react-native';import ToInput from './src/components/ToInput';import ToSearchButton from './src/components/ToSearchButton';import UsersMap from './src/components/UsersMap';import FromInput from './src/components/FromInput';import SplashScreen from 'react-native-splash-screen';import MapView from 'react-native-maps';import { StackNavigator } from 'react-navigation';import ShowOnMap from './src/components/ShowOnMap';import ResultPage from './src/components/ResultPage';import ShowByNumber from './src/components/ShowByNumber';const instructions = Platform.select({  ios: 'Press Cmd+R to reload,\n' + 'Cmd+D or shake for dev menu',  android:    'Double tap R on your keyboard to reload,\n' +    'Shake or press menu button for dev menu',});const {width, height} =Dimensions.get('window')const SCREEN_HEIGHT =heightconst SCREEN_WIDTH = widthconst ASPECT_RATIO= width/heightconst LATTITUDE_DELTA= 0.0922const LONGTITUDE_DELTA=LATTITUDE_DELTA*ASPECT_RATIOexport default class App1 extends Component<Props> {    constructor(props){                super(props);        this.state= {            initialPosition:{                latitude:0,                longitude:0,                latitudeDelta:0,                longitudeDelta:0             },            markerPosition:{                latitude:0,                longitude:0                }         }     }     watchID: ?number = null          componentDidMount(){         SplashScreen.hide();        navigator.geolocation.getCurrentPosition((position) =>{            var lat = parseFloat (position.coords.latitude)            var long2 = parseFloat(position.coords.longitude)                        var initialRegion ={                latitude: lat,                longitude: long2,                latitudeDelta:LATTITUDE_DELTA,                longitudeDelta:LONGTITUDE_DELTA                }                                this.setState({initialPosition: initialRegion})                this.setState({markerPosition: initialRegion})            },            (error)=> alert(JSON.stringify(error)),            {enableHighAccuracy: true, timeout:20000, maximumAge:1000})                                  this.watchID=navigator.geolocation.watchPosition((position)=>{                var lat =parseFloat(position.coords.latitude)                var long1 = parseFloat (position.coords.longitude)                                var lastRegion ={                    latitude:lat,                    longitude:long1,                    longitudeDelta: LONGTITUDE_DELTA,                    latitudeDelta: LATTITUDE_DELTA                    }                this.setState({initialPosition:lastRegion})                this.setState({markerPosition: lastRegion})                         })            this.props.navigation.setParams({handleButton:this.busesNumbers})            }            componentWillUnmount(){                navigator.geolocation.clearWatch(this.watchID)                            }                             static navigationOptions =({navigation})=>{     const{params={}}=navigation.state     return{         title:'Welcome',         headerTitleStyle: {         fontWeight: "bold",         color: "black",         fontSize:20,         marginLeft:0,        },        headerRight: <Button onPress={()=>params.handleButton()} title='Buses' color="black" />     } }  busesNumbers=()=>{    this.props.navigation.navigate('Forth')    }  render() {    return (      <View style={styles.container}>                   <MapView initialRegion={{                latitude: 40.1792,                longitude: 44.4991,                latitudeDelta: 0.0922,                longitudeDelta: 0.0421,                }}                style={styles.map}>            </MapView>        <FromInput />          <ToInput navigation={this.props.navigation}/>                                         </View>        );      }    }const styles = StyleSheet.create({    radius:{    height:50,    width:50,    borderRadius:50/2,    backfaceVisibility:'hidden',    backgroundColor:'rgba(0,122,255,0.1)',    borderColor:'rgba(0,122,255,0.3)',    alignItems:'center',    justifyContent:'center'    },    marker:{    height:20,    width:20,    borderColor:'white',    borderRadius:20/2,    backgroundColor:'#007AFF'    },      container: {    flex: 1,    },  map:{    left: 0,    right: 0,    top: 0,    bottom: 0,    position: 'absolute'  },    button: {      width: 100,      backgroundColor: 'transparent',      top:1,      borderLeftWidth:3,            borderRightWidth:3,                  borderStartWidth:3,        width:"30%" ,      left:0,      padding:2,      left:260,    },    buttonText: {      padding: 20,      marginLeft:0,      alignItems: 'flex-start',      fontWeight: 'bold',      fontSize: 16,      color: 'black',      width:"85%" ,      bottom:7,      left:0,      borderWidth: 0    }});